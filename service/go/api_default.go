// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Bookstore API
 *
 * API for managing books in an online bookstore.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"BooksGet": Route{
			strings.ToUpper("Get"),
			"/books",
			c.BooksGet,
		},
		"BooksIsbnDelete": Route{
			strings.ToUpper("Delete"),
			"/books/{isbn}",
			c.BooksIsbnDelete,
		},
		"BooksIsbnGet": Route{
			strings.ToUpper("Get"),
			"/books/{isbn}",
			c.BooksIsbnGet,
		},
		"BooksIsbnPatch": Route{
			strings.ToUpper("Patch"),
			"/books/{isbn}",
			c.BooksIsbnPatch,
		},
		"BooksPost": Route{
			strings.ToUpper("Post"),
			"/books",
			c.BooksPost,
		},
	}
}

// BooksGet - Get a list of all books
func (c *DefaultAPIController) BooksGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BooksGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BooksIsbnDelete - Delete a book by ISBN
func (c *DefaultAPIController) BooksIsbnDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	isbnParam := params["isbn"]
	if isbnParam == "" {
		c.errorHandler(w, r, &RequiredError{"isbn"}, nil)
		return
	}
	result, err := c.service.BooksIsbnDelete(r.Context(), isbnParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BooksIsbnGet - Get a specific book by ISBN
func (c *DefaultAPIController) BooksIsbnGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	isbnParam := params["isbn"]
	if isbnParam == "" {
		c.errorHandler(w, r, &RequiredError{"isbn"}, nil)
		return
	}
	result, err := c.service.BooksIsbnGet(r.Context(), isbnParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BooksIsbnPatch - Update a book by ISBN
func (c *DefaultAPIController) BooksIsbnPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	isbnParam := params["isbn"]
	if isbnParam == "" {
		c.errorHandler(w, r, &RequiredError{"isbn"}, nil)
		return
	}
	bookParam := Book{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookRequired(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookConstraints(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BooksIsbnPatch(r.Context(), isbnParam, bookParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BooksPost - Add a new book
func (c *DefaultAPIController) BooksPost(w http.ResponseWriter, r *http.Request) {
	bookParam := Book{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookRequired(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookConstraints(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BooksPost(r.Context(), bookParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
