// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Bookstore API
 *
 * API for managing books in an online bookstore.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"context"
	"fmt"
	"net/http"
	"errors"
	"database/sql"

	"github.com/mayureshucsb2019/bookstore/go/db"

)

// DefaultAPIService is a service that implements the logic for the DefaultAPI API.
// This service interacts with the repository layer for data access.
type DefaultAPIService struct {
	Repo *db.BookRepository  // Add a field to hold the repository
}

// NewDefaultAPIService creates a default API service with the given repository.
func NewDefaultAPIService(repo *db.BookRepository) *DefaultAPIService {
	return &DefaultAPIService{
		Repo: repo,
	}
}

// BooksGet - Get a list of all books
func (s *DefaultAPIService) BooksGet(ctx context.Context) (ImplResponse, error) {
	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil
	books, err := s.Repo.GetAllBooks()  // Use the repository to get the books
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	// return Response(200, []Book{}), nil

	return Response(http.StatusOK, books), nil
}

// BooksIsbnDelete - Delete a book by ISBN
func (s *DefaultAPIService) BooksIsbnDelete(ctx context.Context, isbn string) (ImplResponse, error) {
	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil
	err := s.Repo.DeleteBook(isbn)  // Use the repository to get the books
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusOK, nil), nil
}

// BooksIsbnGet - Get a specific book by ISBN
func (s *DefaultAPIService) BooksIsbnGet(ctx context.Context, isbn string) (ImplResponse, error) {
	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil
	book, err := s.Repo.GetBookByISBN(isbn)  // Use the repository to get the books
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	
	return Response(http.StatusOK, book), nil
}

// BooksIsbnPatch - Update a book by ISBN
func (s *DefaultAPIService) BooksIsbnPatch(ctx context.Context, isbn string, book Book) (ImplResponse, error) {
	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil
	// Check if the provided ISBN in the request path matches the ISBN in the body
	if book.Isbn != isbn {
		return Response(http.StatusBadRequest, nil), errors.New("ISBN in the path does not match ISBN in the body")
	}

	// Call the repository method to update the book
	dbBook := convertToDBBook(book)
	err := s.Repo.UpdateBook(&dbBook)
	if err != nil {
		if err == sql.ErrNoRows {
			return Response(http.StatusNotFound, nil), errors.New("book not found")
		}
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusOK, nil), nil
}

// BooksPost - Add a new book
func (s *DefaultAPIService) BooksPost(ctx context.Context, book Book) (ImplResponse, error) {
	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil
	dbBook := convertToDBBook(book)

    err := s.Repo.CreateBook(&dbBook)
    if err != nil {
        return Response(http.StatusInternalServerError, nil), fmt.Errorf("failed to add book: %w", err)
    }

	return Response(http.StatusCreated, nil), nil
}

// Convert Book to db.Book
func convertToDBBook(book Book) db.Book {
	dbBook := db.Book{
		ISBN:            book.Isbn,
		Name:            book.Name,
		Tags:            book.Tags,
		AuthorName:      book.AuthorName,
		DateOfPublish:   book.DateOfPublish,
		PublishingHouse: book.PublishingHouse,
		NumberOfPages:   int(book.NumberOfPages), // Convert int32 to int
		Cost:            float64(book.Cost),       // Convert float32 to float64
	}
	return dbBook
}